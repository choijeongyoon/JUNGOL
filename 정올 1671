package 정올;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main1438 {

	static int[][] paper = new int [101][101];
	static boolean[][] isVisit = new boolean[101][101];
	
	static int[] dx = {-1, -1, 0, 0};
	static int[] dy = {0, 0, -1, -1};
	
	static int round = 0;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();
		
		// 입력
		for(int i = 0; i < N; i++) {
			int x = sc.nextInt();
			int y = sc.nextInt();
			
			for(int r = x; r < x + 10; r++) {
				for(int c = y; c < y + 10; c++) {
					paper[r][c] = 1;
				}
			}
		}
		
		// 둘레 확인
		/* 1. 탐색하다가 1만나면 사방탐색
		 * 2. 0인 공간둘레 ++
		 */
		
		for(int i = 0; i < paper.length; i++) {
			for(int j = 0; j < paper.length; j++) {
				if(paper[i][j] == 1 && !isVisit[i][j]) {
					bfs(i,j);
				}
			}
		}
		
		System.out.println(round);
	}
	private static void bfs(int i, int j) {
		Queue<int[]> q = new LinkedList<>();
		
		q.add(new int[] {i,j});
		isVisit[i][j] = true;
		
		while(!q.isEmpty()) {
			int x = q.peek()[0];	// 큐의 맨 아래 있는 객체를 반환. 객체를 큐에서 제거하진 x.
			int y = q.poll()[1];	// 큐에서 데이터를 꺼내옴. 만일 큐가 비어있다면 null을 반환.
			
			for(int k = 0; k < 4; k++) {
				int nx = x + dx[k];
				int ny = y + dy[k];
				
				// 범위 밖이면 -> 아웃
				if(!(0 <= nx && nx < 101 && 0 <= ny && ny < 101))
					continue;
				
				// 인접값이 0이면 체크, 꺾인 부분은 중복체크되도록 방문처리 안함
				if(paper[nx][ny] == 0)
					round++;
				
				// 다음 값이 탐색대상(1) 이고, 미 방문이면 Q에 넣고 방문처리
				if(paper[nx][ny] == 1 && !isVisit[nx][ny]) {
					isVisit[nx][ny] = true;
					q.add(new int[] {nx, ny});
				}
			}
		}
	}
